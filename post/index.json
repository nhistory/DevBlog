[
    
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2022/02/24/__dirname-issue-with-node.js/",
                "title": "‘__dirname’ issue with Node.js",
                "section": "post",
                "date" : "2022.02.24",
                "body": "What is ‘__dirname’?  The **dirname in a node script returns the path of the folder where the current JavaScript file resides. **filename and __dirname are used to get the filename and directory name of the currently executing file.\n When I use express.js as a backend, I faced some issues with ‘__dirname’.\nI should use ‘__dirname’ to serve static files in Express.\nTo serve static files such as images, CSS files, and JavaScript files, use the express.static built-in middleware function in Express.\nThe function signature is:\nexpress.static(root, [options]); For example, use the following code to serve images, CSS files, and JavaScript files in a directory named public:\napp.use(express.static(\u0026#39;public\u0026#39;)); Now, you can load the files that are in the public directory:\nhttp://localhost:3000/images/kitten.jpg http://localhost:3000/css/style.css http://localhost:3000/js/app.js http://localhost:3000/images/bg.png http://localhost:3000/hello.html The path that you provide to the express.static function is relative to the directory from where you launch your node process. If you run the express app from another directory, it’s safer to use the absolute path of the directory that you want to serve:\nconst path = require(\u0026#39;path\u0026#39;); app.use(\u0026#39;/static\u0026#39;, express.static(path.join(__dirname, \u0026#39;public\u0026#39;))); This is a point we have to use ‘__dirname’ as a path instruction. But when I follow this instruction, there are some issues.\n‘__dirname’ is not defined in ES module scope in JS Nodemon displays the error message ‘__dirname’ is not defined in ES module scope in JS. What??\nWhy do I need to define this script? Because I didn’t import the path module.\nimport path from \u0026#39;path\u0026#39;; But there is one more thing. It is not enough to solve this problem.\n‘**dirname’ should return the path of the folder, so we need to declare ‘**filename’ as well.\nSo I fixed the code like this.\nimport express from \u0026#39;express\u0026#39;; import { fileURLToPath } from \u0026#39;url\u0026#39;; import { dirname } from \u0026#39;path\u0026#39;; const __filename = fileURLToPath(import.meta.url); const __dirname = dirname(__filename); const app = express(); app.set(\u0026#39;view engine\u0026#39;, \u0026#39;pug\u0026#39;); app.set(\u0026#39;views\u0026#39;, __dirname + \u0026#39;/views\u0026#39;); app.use(\u0026#39;/public\u0026#39;, express.static(__dirname + \u0026#39;/public\u0026#39;)); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; res.render(\u0026#39;home\u0026#39;)); const handleListen = () =\u0026gt; console.log(`Listening on http://localhost:3000`); app.listen(3000, handleListen);   url.fileURLToPath(url) This function ensures the correct decodings of percent-encoded characters as well as ensuring a cross-platform valid absolute path string.\nimport { fileURLToPath } from \u0026#39;url\u0026#39;; const __filename = fileURLToPath(import.meta.url); new URL(\u0026#39;file:///C:/path/\u0026#39;).pathname; // Incorrect: /C:/path/ fileURLToPath(\u0026#39;file:///C:/path/\u0026#39;); // Correct: C:\\path\\ (Windows)  new URL(\u0026#39;file://nas/foo.txt\u0026#39;).pathname; // Incorrect: /foo.txt fileURLToPath(\u0026#39;file://nas/foo.txt\u0026#39;); // Correct: \\\\nas\\foo.txt (Windows)  new URL(\u0026#39;file:///你好.txt\u0026#39;).pathname; // Incorrect: /%E4%BD%A0%E5%A5%BD.txt fileURLToPath(\u0026#39;file:///你好.txt\u0026#39;); // Correct: /你好.txt (POSIX)  new URL(\u0026#39;file:///hello world\u0026#39;).pathname; // Incorrect: /hello%20world fileURLToPath(\u0026#39;file:///hello world\u0026#39;); // Correct: /hello world (POSIX)   References https://www.geeksforgeeks.org/difference-between-__dirname-and-in-node-js/\nhttps://expressjs.com/en/starter/static-files.html\nhttps://nodejs.org/api/url.html#urlfileurltopathurl\n"
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/12/25/diagonal-difference/",
                "title": "Diagonal Difference",
                "section": "post",
                "date" : "2021.12.25",
                "body": "Given a square matrix, calculate the absolute difference between the sums of its diagonals.\nFor example, the square matrix is shown below:\n1 2 3\r4 5 6\r9 8 9\rThe left-to-right diagonal = 1+5+9=15. The right to left diagonal = 3+5+9=17 . Their absolute difference is |15-17|=2.\nFor this problem, we need to use ‘2D list’ in Java.\n Create 2D ArrayList  ArrayList\u0026lt;ArrayList\u0026lt;Integer\u0026gt;\u0026gt; arr = new ArrayList\u0026lt;ArrayList\u0026lt;Integer\u0026gt;\u0026gt;(); After initialize 2D list, we should store memory by default at each nth rows.\narr.add(new ArrayList\u0026lt;Integer\u0026gt;());  Modify the default value : use get(), and add().  arr.get(0).add(0,1); arr.get(0).add(1,2); arr.get(0).add(2,3); //[[1,2,3]] import java.util.ArrayList; /** * main */ public class main { public static void main(String[] args) { // Create 2D ArrayList  ArrayList\u0026lt;ArrayList\u0026lt;Integer\u0026gt;\u0026gt; arr = new ArrayList\u0026lt;ArrayList\u0026lt;Integer\u0026gt;\u0026gt;(); // Allocating space to 0th row with the help of \u0026#39;new\u0026#39; keyword  // At 0th row, 0 gets stored in memory by default  arr.add(new ArrayList\u0026lt;Integer\u0026gt;()); // At 0th row, modifing the default value  arr.get(0).add(0,1); arr.get(0).add(1,2); arr.get(0).add(2,3); arr.add(new ArrayList\u0026lt;Integer\u0026gt;()); arr.get(1).add(0,4); arr.get(1).add(1,5); arr.get(1).add(2,6); arr.add(new ArrayList\u0026lt;Integer\u0026gt;()); arr.get(2).add(0,9); arr.get(2).add(1,8); arr.get(2).add(2,9); // print 2D list arr  System.out.println(arr); // // print sepecific index of 2D list  // System.out.println(arr.get(0).get(0));  // initialize diagonals  int sum1 = 0; int sum2 = 0; for(int i = 0; i\u0026lt;arr.size();i++){ for(int j = 0; j\u0026lt;arr.get(i).size();j++){ if (i==j){ sum1 = sum1 + arr.get(i).get(j); } } } for(int i = 0; i\u0026lt;arr.size();i++){ for(int j = 0; j\u0026lt;arr.get(i).size();j++){ if (i+j==arr.size()-1){ sum2 = sum2 + arr.get(i).get(j); } } } // Get a absolute difference between sums  int result = Math.abs(sum1-sum2); System.out.println(sum1); System.out.println(sum2); System.out.println(result); } } References\nDiagonal Difference | HackerRank\n2D Array List in Java\n"
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/11/26/stack/",
                "title": "Stack",
                "section": "post",
                "date" : "2021.11.26",
                "body": "스택은 가장 나중에 들어온 자료가 가장 먼저 처리되는 LIFO(Last-In-First-Out) 자료구조이다. 구멍이 하나밖에 없는 병이라고 생각하면 이해하기 쉽다.\n스택은 다음 4가지 operation을 지원해야 한다.\n pop() : 스택의 가장 위에 있는 데이터를 제거. (가장 최근에 추가된 데이터) push(item) : 데이터를 스택의 가장 위에 추가 peek() : 스택의 가장 위에 있는 데이터를 리턴. isEmpty() : 스택이 비어 있을 때 True를 리턴.  3.1 Describe how you could use a single array to implement three stacks. Approach 1: Fixed Division 리스트를 3등분한 다음 각각을 스택으로 활용하는 방법\n스택 사이즈를 동일하게 구성하고 각각의 스텍에 데이터를 넣는 방식이다.\n간단하게 구현할 수 있지만, 스텍마다 입력한 데이터의 갯수가 다른 경우 비효율적으로 공간을 차지하게 된다.\n예를 들어 두번째 스텍은 데이터가 5개이고 나머지 스텍은 2개, 3개인 경우 어레이 안에 비어있는 공간이 생기게 된다. 이후 두번째 스텍에 데이터가 하나 더 들어오게 되면 어레이 안에 이미 빈 공간이 있음에도 전체 어레이를 늘려줘야 하는 비효율이 발생한다.\n  isEmpty(), isFull()\n  push\n   push(10,0)   push(20,0)   push(11,1)  Approach 2: Flexible Divisions  push()  def push(self, item, stackNumber): if self.isFull(): print(\u0026#34;Stack Overflow\u0026#34;) return insert_at = self.free self.free = self.next[self.free] self.arr[insert_at] = item self.next[insert_at] = self.top[stackNumber] self.top[stackNumber] = insert_at # Push some items onto stack number 2. kstacks.push(15, 2) kstacks.push(45, 2) # Push some items onto stack number 1. kstacks.push(17, 1) kstacks.push(49, 1) kstacks.push(39, 1) # Push some items onto stack number 0. kstacks.push(11, 0) kstacks.push(9, 0) kstacks.push(7, 0) 3.2 How would you design a stack which, in addition to push and pop, has a function min which returns the minimum element? Push, pop and min should all operate in 0(1) time. class Minstack: def __init__(self): self.stack = [] self.minStack = [] def push(self, val: int) -\u0026gt; None: self.stack.append(val) val = min(val, self.minStack[-1] if self.minStack else val) self.minStack.append(val) def pop(self) -\u0026gt; None: self.stack.pop() self.minStack.pop() def top(self) -\u0026gt; int: return self.stack[-1] def getMin(self) -\u0026gt; int: return self.minStack[-1] 3.3 Imagine a (literal) stack of plates. If the stack gets too high, it might topple. Therefore, in real life, we would likely start a new stack when the previous stack exceeds some threshold. Implement a data structure SetOfStacks that mimics this. SetOfStacks should be composed of several stacks and should create a new stack once the previous one exceeds capacity. SetOfStacks. push() and SetOfStacks. pop() should behave identically to a single stack (that is, pop () should return the same values as it would if there were just a single stack). Stack of Plates ~ Cracking the Code (Python)\nStack of Plates\n capacity = 3, item이 8개인 경우  stacks = [[1,2,3],[4,5,6],[7,8]]\npop()\npopAt(1)\npopAt(0)\npush(10)\n"
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/10/03/cyclicrotation/",
                "title": "CyclicRotation",
                "section": "post",
                "date" : "2021.10.03",
                "body": "An array \u0026lsquo;A\u0026rsquo; consisting of \u0026lsquo;N\u0026rsquo; integers is given. Rotation of the array means that each element is shifted right by one index, and the last element of the array is moved to the first place. For example, the rotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7] (elements are shifted right by one index and 6 is moved to the first place).\nCyclicRotation coding task - Learn to Code - Codility\nsolution The goal is to rotate array A K times; that is, each element of A will be shifted to the right K times.\nSo we need to make a function that has two arguments like this. def solution(A,K)\nFirst of all, we need a new array that already shifted each element, and after that repeats this process. There is a common way to repeat some method, it is for loop.\ndef solution(A , K): # define A as an old version array old = A # make a new array has a same length new = [0]*len(A) # for loop iterated \u0026#39;K\u0026#39; times for i in range(K): Inside of for literation, move the last element of the old version array to the first element of the new one. And the rest of the elements is saved into the new array index 1. After all \u0026lsquo;new\u0026rsquo; array should be changed into the \u0026lsquo;old\u0026rsquo; version array for the next iteration.\ndef solution(A , K): # define A as an old version array old = A # make a new array has a same length new = [0]*len(A) # for loop iterated \u0026#39;K\u0026#39; times for i in range(K): # shift the last element to the first place. new[0] = old[-1] # rest of elements moved after index 1. new[1:] = old[:-1] # copy new array into old array old = new.copy() If we do not use copy(), output of function would be changed. Let me check this.\ndef solution(A , K): old = A new = [0]*len(A) for i in range(K): new[0]=old[-1] print(new[0]) print(new, new[1:]) new[1:] = old[:-1] print(new[1:]) old = new.copy() print(old) return new print(solution([1,2,3,4,5], 2)) To check the meaning of copy(), put in the print() each steps.\n without copy()   with copt()  This is an immutability issue. If we use not copy(), an old array will be the same as the new array when got an [-1] index element. So we need to keep immutability between the old and new arrays after doing the first iteration.\nReference https://app.codility.com/programmers/lessons/2-arrays/cyclic_rotation/\n"
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/09/27/binary-gap/",
                "title": "Binary Gap",
                "section": "post",
                "date" : "2021.09.27",
                "body": "A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.\nIn order to make code of finding out the binary gap of integer \u0026lsquo;N\u0026rsquo;, first of all we need to exchange from integer N to binary representation.\nint to binary There are several methods to change int into binary by python. bin method is the most simple way, but we need to remove 0b from result. So I select to use format(N, 'b).\ndef solution(N): # int to binary bin_N = format(N,\u0026#39;b\u0026#39;) print (bin_N) solution(100) #1100100 find binary gap Binary gap is the number of consecutive zeros between ones. We need to get rid of leading and trailing zeros.\ndef solution(N): # int to binary bin_gap = format(N,\u0026#39;b\u0026#39;).strip(\u0026#39;0\u0026#39;) print (bin_gap) solution(100) #11001 Next step, I want to use split method, because we need maximum value of consecutive zeros.\ndef solution(N): # int to binary bin_gap = format(N,\u0026#39;b\u0026#39;).strip(\u0026#39;0\u0026#39;).split(\u0026#39;1\u0026#39;) print (bin_gap) solution(100) #[\u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;\u0026#39;] Finally, we can make an output of binary gap using by max and len method.\ndef solution(N): # int to binary bin_gap = len(max(format(N,\u0026#39;b\u0026#39;).strip(\u0026#39;0\u0026#39;).split(\u0026#39;1\u0026#39;))) print (bin_gap) solution(100) #2 Reference https://app.codility.com/programmers/lessons/1-iterations/binary_gap/\n"
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/09/20/immutability-and-redux/",
                "title": "Immutability and Redux",
                "section": "post",
                "date" : "2021.09.20",
                "body": "Immutable?? An immutable object is one whose content cannot be changed. An object can be immutable for various reasons, for example:\n To improve performance (no planning for the object\u0026rsquo;s future changes) To reduce memory use (make object references instead of cloning the whole object) Thread-safety (multiple threads can reference the same object without interfering with one other)  What are the benefits of Immutability?  Easier Undo/Redo and Time Travel  When you are implementing word document in Javascript and you want to give features like redo/ undoes then you need to have different copies at a different time. We need to avoid mutation and should keep the references of older versions as well. just like version control system.\n Tracking Changes  when you are working on the complex object. In case Object is mutable one step/statement can change the structure or value of the object and later operation may lead incorrect data. Immutable data helps here.\n Determining When to Re-render in React  This point is regarding when to update the view of your page. If we have different copies of the object we can decide if 2 objects are changed then we will update. We need something to take a decision on otherwise we will keep updating the vie whenever some event has fired.\nWhen I research about this topic, \u0026lsquo;Immutability\u0026rsquo; is significant issue to improve code and application quality. If you want to make good use of immutability, you can find \u0026lsquo;Redux\u0026rsquo;.\nRedux Redux is a predictable state container for JavaScript apps.\nIt helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger.\nYou can use Redux together with React, or with any other view library. It is tiny (2kB, including dependencies), but has a large ecosystem of addons available.\nhttps://opentutorials.org/module/4078/24935\nSimple example  Use Redux cdn.  redux - Libraries - cdnjs - The #1 free and open source CDN built to make life easier for developers\n\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/redux/4.1.1/redux.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  Make \u0026lsquo;store\u0026rsquo; by Redux API and assign variable \u0026lsquo;store\u0026rsquo;.  let store = Redux.createStore(reducer);  Create reducer function and set \u0026lsquo;state\u0026rsquo; and \u0026lsquo;action\u0026rsquo; as the arguments. Assign an initial value as \u0026lsquo;undefined\u0026rsquo;.  function reducer(state, action) { if (state === undefined) { return { color: \u0026#39;yellow\u0026#39; }; } }  Call out state value by store.getState.  let state = store.getState();  Create \u0026lsquo;action\u0026rsquo; by dispatch. (type must be included)  store.dispatch({ type: \u0026#39;CHANGE_COLOR\u0026#39;, color: \u0026#39;red\u0026#39; });  Call out the \u0026lsquo;newState\u0026rsquo; and assign new state value by action type.  let newState; if (action.type === \u0026#39;CHANGE_COLOR\u0026#39;) { newState = Object.assign({}, state, { color: \u0026#39;red\u0026#39; }); } return newState;  Use \u0026lsquo;subscribe\u0026rsquo; whenever state value changed, render will be done.  store.subscribe(red);    Reference https://developer.mozilla.org/en-US/docs/Glossary/Immutable\nhttps://www.cronj.com/blog/why-immurability-is-so-important/\nhttps://redux.js.org/introduction/getting-started\n"
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/09/07/ajax-and-fetch-api/",
                "title": "Ajax and Fetch API",
                "section": "post",
                "date" : "2021.09.07",
                "body": "What is Ajax? AJAX stands for Asynchronous JavaScript And XML. In a nutshell, it is the use of the XMLHttpRequest object to communicate with servers. It can send and receive information in various formats, including JSON, XML, HTML, and text files. AJAX’s most appealing characteristic is its \u0026ldquo;asynchronous\u0026rdquo; nature, which means it can communicate with the server, exchange data, and update the page without having to refresh the page.\nhttps://systemoutofmemory.com/blogs/the-programmer-blog/javascript-understanding-ajax-calls\nWhy shoud we use Ajax?  Make requests to the server without reloading the page. Receive and work with data from the server.  Fetch API Fetch provides a generic definition of Request and Response objects (and other things involved with network requests). This will allow them to be used wherever they are needed in the future, whether it’s for service workers, Cache API, and other similar things that handle or modify requests and responses, or any kind of use case that might require you to generate your responses programmatically (that is, the use of computer program or personal programming instructions).\nfetch() vs jQuery.ajax()  The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. Instead, as soon as the server responds with headers, the Promise will resolve normally (with the ok property of the response set to false if the response isn’t in the range 200–299), and it will only reject on network failure or if anything prevented the request from completing. fetch() won’t send cross-origin cookies unless you set the credentials init option.  Example const myImage = document.querySelector(\u0026#39;img\u0026#39;); let myRequest = new Request(\u0026#39;flowers.jpg\u0026#39;); fetch(myRequest) .then(function (response) { if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); } return response.blob(); }) .then(function (response) { let objectURL = URL.createObjectURL(response); myImage.src = objectURL; }); Reference What\u0026rsquo;s AJAX?\nFetch API\n"
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/07/18/docker-image-docker-compose/",
                "title": "Docker Image \u0026 docker-compose",
                "section": "post",
                "date" : "2021.07.18",
                "body": "그럼 이제 구체적으로 실제 Docker를 사용하는 방법에 대해 정리해보도록 하자.\nhttps://stackoverflow.com/questions/23735149/what-is-the-difference-between-a-docker-image-and-a-container\nDocker를 사용하기 위해서는 먼저 사용하고자 하는 Docker Image를 만들어야 한다. Docker Image는 개발환경을 만들어주는 역할을 한다. 이 Docker Image를 통해 실질적으로 프로그램을 실행할 수 있는 환경을 만들어 주는 것이 Container이다.\n Images: A docker image contains everything you need to run your application. It is a template that holds a set of instructions needed to create a working container. Container: This is a running process/instance of an image. A docker container ‘contains’ everything your application needs to run and can run your application in any environment — as discussed above. Dockerfile: A dockerfile is a blueprint/set of instructions that defines how your image is built. It is a series of steps that you have defined, and that must happen before your image is successfully built. Docker hub: Think of Github. Docker hub is a registry that allows you to host your images and gives you access to a wide number of other docker images that you can pull and work with. Dockerignore: The .dockerignore file acts like the .gitignore file. It contains any file in your local application that you do not want in your docker image.  Docker를 활용해서 개발환경을 구축하기 위해서는 먼저 Docker Image를 만들어야 한다. Docker Image는 Dockerfile을 이용해서 만들 수 있다.\nDocker Image 만들기 작업할 폴더에서 Ubuntu18.04 버전으로 Dockerfile을 만들었다.\nFROMubuntu:18.04RUN apt-get updateRUN apt-get -y install nodejsRUN apt-get -y install npmRUN npm install -g yarn위 도커 파일을 실행하면 ubuntu 18.04 위에서 nodejs, npm, yarn을 순차적으로 설치하게 된다. docker image를 만들기 위한 명령어는 다음과 같다.\ndocker build --no-cache -t [imagename]:latest . 커맨드를 실행하고 나서 Docker Image파일을 검색해본다.\nreact-builder 라는 이름으로 이미지가 만들어졌다.\nDocker Image 다운받기 Docker는 Docker Hub라는 사이트를 통해 도커 이미지를 공유할 수 있다. 터미널에서 docker search node 명령어를 사용하면 node 관련 도커 이미지를 인기 순으로 확인할 수도 있다.\n예를 들어 node 16버전을 다운받고 싶다면 아래와 같이 명령어를 입력한다.\ndocker pull node:16 Docker compose 위와 같이 직접 생성하거나 다운받은 이미지를 이용해서 docker container를 생성하면 로컬에 설치하지 않고 다양한 개발환경을 구축할 수 있게 된다. docker-compose.yml을 이용해서 간단하게 개발환경을 구축해보았다.\ndocker-compose.yml\nversion: \u0026#39;3.8\u0026#39;services: node: image: \u0026#39;node:16\u0026#39; user: \u0026#39;node\u0026#39; working_dir: /home/node/app environment: - NODE_ENV=production volumes: - ./:/home/node/app tty: true ports: - 3001:3000 version : compose파일에서는 먼저 스키마 버전을 정의한다. 대부분의 경우 지원되는 가장 최신 버전을 사용하는 것이 좋다. services : 실행하려는 서비스, 또는 컨테이너 목록을 정의한다. image : 다운받아 활용할 컨테이너 이미지를 정의한다. command : 일반적으로 image 정의 가까운 곳에 실행할 명령을 표시한다.  vscode에서 remote-container extension을 설치하면 docker-compose 파일 설정대로 간단하게 컨테이너를 실행할 수 있다. 개발에 필요한 언어나 패키지 파일들은 컨테이너에 설치해서 사용하고 실행 파일들은 로컬 저장소에 저장하는 방식이다.\nReference Get started with development Containers in Visual Studio Code\nGetting Started With Docker in Your React.Js Application - The Basics\n"
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/07/10/remote-containers-in-vs-code/",
                "title": "Remote containers in VS code",
                "section": "post",
                "date" : "2021.07.10",
                "body": "The Remote containers extention can use a Docker container as a full-featured development environment. If you want to make a remote container setup in visual studio code, there are several mandatory settings.\nKeywords container 컨테이너는 가상 머신과 마찬가지로 애플리케이션을 관련 라이브러리 및 종속 항목과 함께 패키지로 묶어 소프트웨어 서비스 구동을 위한 격리 환경을 마련해 줍니다. 컨테이너를 사용하면 개발자와 IT 운영팀이 훨씬 작은 단위로 업무를 수행할 수 있으므로 그에 따른 이점이 훨씬 많습니다.\n  왜 컨테이너를 사용해야 하는가?\n가상 머신은 하드웨어 스택을 가상화합니다. 컨테이너는 이와 달리 운영체제 수준에서 가상화를 실시하여 다수의 컨테이너를 OS 커널에서 직접 구동합니다. 컨테이너는 훨씬 가볍고 OS 커널을 공유하며, 시작이 훨씬 빠르고 OS 전체 부팅보다 메모리를 훨씬 적게 차지합니다.\n    컨테이너를 사용하면 애플리케이션과 종속 항목을 버전 관리가 쉬운 하나의 패키지로 묶어 팀 내의 여러 개발자가 쉽게 복제하고 클러스터 내의 머신으로도 간편하게 복제되도록 만들 수 있습니다.\n  소프트웨어 라이브러리로 개별 코드를 패키지로 묶어 사용자 인증 및 세션 관리 등의 로직을 추상화할 수 있듯이, 컨테이너로 애플리케이션 전체를 패키지로 묶어 운영체제와 머신, 코드 자체까지 추상화할 수 있습니다. 이를 서비스 기반 아키텍처와 결합하면 개발자들이 논리성을 판단해야 하는 단위 자체가 훨씬 작아지므로 민첩성과 생산성이 크게 향상됩니다. 그 결과 애플리케이션의 개발 및 테스트, 배포, 전반적인 관리가 훨씬 쉬워집니다.\n  컨테이너의 개념과 이점 | Google Cloud\ndocker 도커는 컨테이너 기반의 오픈소스 가상화 플랫폼입니다.\n도커에서 가장 중요한 개념은 컨테이너와 함께 이미지라는 개념입니다.\n  이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않습니다(Immutable). 컨테이너는 이미지를 실행한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다. 같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있습니다.\n말그대로 이미지는 컨테이너를 실행하기 위한 모든 정보를 가지고 있기 때문에 더 이상 의존성 파일을 컴파일하고 이것저것 설치할 필요가 없습니다. 이제 새로운 서버가 추가되면 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다. 한 서버에 여러개의 컨테이너를 실행할 수 있고, 수십, 수백, 수천대의 서버도 문제없습니다.\n  VS code에서 리모트 컨테이너 extension을 이용해서 개발하는 방법 레퍼런스 문서\nDeveloping inside a Container using Visual Studio Code Remote Development\n Docker for mac 설치한다. VScode에서 extension으로 Remote-container, Docker를 설치한다. Command Palette에서 \u0026lsquo;Open Folder in Container\u0026rsquo;를 클릭한다. 컨테이너로 실행시키고자 하는 폴더를 선택한다.   Dockerfile example  FROMnode:12WORKDIR/appCOPY package*.json ./RUN npm installCOPY . .ENV PORT=8080 EXPOSE8080CMD [ \u0026#34;npm\u0026#34;, \u0026#34;start\u0026#34;]  Docker compose\n도커는 복잡한 설정을 쉽게 관리하기 위해 YAML방식의 설정파일을 이용한 Docker Compose라는 툴을 제공합니다.\nDocker에서 제공하는 Compose Sample\ndocker/awesome-compose\n여러개의 도커 이미지들을 이용한 복잡한 세팅의 개발환경을 구축해야 할 때 docker-compose파일을 이용하면 손쉽게 세팅이 가능하다고 한다. 자세한 내용은 추후에 다른 포스팅에서 정리해 볼 예정이다.\n "
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/06/28/element.classlist/",
                "title": "Element.classList",
                "section": "post",
                "date" : "2021.06.28",
                "body": "The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.\nUsing classList is a convenient alternative to accessing an element\u0026rsquo;s list of classes as a space-delimited string via element.className.\nSyntax const elementClasses = elementNodeReference.classList; Example const div = document.createElement(\u0026#34;div\u0026#34;); div.className = \u0026#34;foo\u0026#34;; // our starting state: \u0026lt;div class=\u0026#34;foo\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; console.log(div.outerHTML); // use the classList API to remove and add classes div.classList.remove(\u0026#34;foo\u0026#34;); div.classList.add(\u0026#34;anotherclass\u0026#34;); // \u0026lt;div class=\u0026#34;anotherclass\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; console.log(div.outerHTML); // if visible is set remove it, otherwise add it div.classList.toggle(\u0026#34;visible\u0026#34;); // add/remove visible, depending on test conditional, i less than 10 div.classList.toggle(\u0026#34;visible\u0026#34;, i \u0026lt; 10); console.log(div.classList.contains(\u0026#34;foo\u0026#34;)); // add or remove multiple classes div.classList.add(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;); div.classList.remove(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;); // add or remove multiple classes using spread syntax const cls = [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;]; div.classList.add(...cls); div.classList.remove(...cls); // replace class \u0026#34;foo\u0026#34; with class \u0026#34;bar\u0026#34; div.classList.replace(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;); When controlling HTML with Javascript, you must be aware of the division of roles with CSS. Since it is right to control the design part of the site screen with CSS, the correct way is to indirectly control CSS while changing the HTML tag ID or class name with Javascript when giving design interaction.\n Javascript 로 HTML을 컨트롤할 때 CSS와의 역할분담에 대해 인지하고 있어야 한다. 사이트 화면의 디자인 적인 부분은 CSS로 컨트롤 하는 것이 맞기 때문에 디자인 적인 인터렉션을 줄 때 Javascript로 HTML tag의 ID나 class name을 변경시켜주면서 간접적으로 CSS를 컨트롤해 주는 것이 올바른 방법이다.\n It is the properties of classList that are used in this situation.\n 이러한 상황에서 사용하는 것이 바로 classList의 property들이다.\n"
            }
        
    ,
        
            {
                "ref": "https://nhistory.github.io/DevBlog/2021/06/26/getelementbyid-vs-queryselector/",
                "title": "getElementById() vs querySelector()",
                "section": "post",
                "date" : "2021.06.26",
                "body": "When calling a specific element of an HTML file with Javascript, two methods are often used among document properties.\n Javascript로 HTML 파일의 특정 element를 호출할 때 document의 property 중 흔히 2가지 방법을 사용한다.\n const elementId = document.getElementById(\u0026#34;id\u0026#34;); const elementClass = document.getElementByClassName(\u0026#34;class\u0026#34;); const elementTag = document.getElementById(\u0026#34;tag\u0026#34;); const element = document.querySelector(\u0026#34;selector\u0026#34;); const elementAll = document.querySelectorAll(\u0026#34;selector\u0026#34;); If you use getElementBy, you must use a specific id and class name for each element. Therefore, it is fast, but if you find an element by tag name, it usually returns the result in an array, so it may be difficult to use a specific element.\n getElementBy 를 이용하면 각각의 element 마다 특정한 id, class 이름을 사용해야 한다. 그렇기 때문에 속도는 빠르지만, tag name으로 element를 찾으면 보통 array로 결과를 리턴하기 때문에 특정 요소를 사용하기 어려울 수 있다.\n Because querySelector uses CSS selector, you can specify the element exactly at the desired position. Instead, it can be slow because the selector becomes more complex.\n querySelector 는 CSS selector 를 사용하기 때문에 원하는 위치의 element를 정확히 지정할 수 있다. 대신 selector가 아무래도 복잡해지기 때문에 속도가 느려질 수 있다.\n  Even if multiple elements are selected with querySelector at the same time, only the first element is returned. If you want to get all of them, you should use querySelectorAll.\n querySelector 로 여러개의 element를 동시에 선택해도 제일 첫 번째 element만 리턴한다. 여러개를 모두 가져오고 싶으면 querySelectorAll 을 사용해야 한다.\n"
            }
        
    
]